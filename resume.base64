{
  "basics": {
    "name": "Seth Kingry",
    "label": "DevOps Wizard",
    "picture": "https://secure.gravatar.com/avatar/24442da8a602aba08219cabf3a939bde?s=100",
    "email": "sjkingry@gmail.com",
    "phone": "(408) 334-3195",
    "summary": "",
    "location": {
      "city": "Atlanta",
      "region": "Georgia"
    },
    "profiles": [
      {
        "network": "GitHub",
        "username": "skingry",
        "url": "https://www.github.com/skingry"
      }
    ]
  },
  "work": [
    {
      "company": "Mailchimp",
      "position": "Technical Lead - Core Infrastructure Engineering",
      "website": "https://www.mailchimp.com",
      "startDate": "2016-05-01",
      "endDate": "Present",
      "summary": "",
      "highlights": [
        "Mentored and lead team of six engineers.",
        "Built out and maintained organization's three on-prem Kubernetes clusters (~128 nodes).",
        "Maintained organization's load balancing, DNS, DHCP, LDAP, and NTP infrastructure.",
        "Maintained organization's core platform infrastructure (ie. the infrastructure that powers the product 'Mailchimp').",
        "Containerized monolithic applications, preparing them to run on Kubernetes.",
        "Worked closely with and maintained relationships with technical leads in other areas of infrastructure (Database Engineering, Storage Engineering, Networking, Data Pipeline, Search, Observability)."
      ]
    },
    {
      "company": "Tourbuzz",
      "position": "Director of Web and IT Operations",
      "website": "https://www.tourbuzz.net",
      "startDate": "2014-10-01",
      "endDate": "2016-05-01",
      "summary": "",
      "highlights": [
        "Responsible for procurement and maintenance of company's IT assets (laptops, printers, file servers, CCTV, networking, etc).",
        "Upgraded and consolidated web properties infrastructure configuration management (Chef) into a single maintainable codebase.",
        "Designed and maintained tooling used for day to day operations by the development team (Vagrant, Capistrano, VoIP telephony integrations).",
        "Provided day to day and on-call operational support for all web properties running on Amazon AWS.",
        "Migrated specific components of primary web product from Heroku to AWS Lambda (microservices) resulting in infrastructure cost savings of ~$10k per month."
      ]
    },
    {
      "company": "Shopify",
      "position": "Web Operations Specialist (Contract)",
      "website": "https://www.shopify.com",
      "startDate": "2013-10-01",
      "endDate": "2014-10-01",
      "summary": "",
      "highlights": [
        "Implemented monitoring solution for web infrastructure utilizing statsd and DataDog.",
        "Maintained private cloud infrastructure in two remote data centers (Reston, Virginia and Chicago, Illinois).",
        "Implemented and supported company's data warehouse running on Amazon Redshift.",
        "Developed tooling and provided operational support for business intelligence and data science teams (techology stack included Tableau, HP Vertica, Cloudera).",
        "Worked remotely from Atlanta, GA."
      ]
    },
    {
      "company": "IBM c/o SugarCRM",
      "position": "Web Operations Specialist (Contract)",
      "website": "https://www.ibm.com",
      "startDate": "2013-09-01",
      "endDate": "2013-10-01",
      "summary": "",
      "highlights": [
        "Built custom binary packages of MySQL Percona 5.5 and 5.6 for IBM POWER8 CPU architecture.",
        "Load tested and benchmarked SugarCRM application on pre-production IBM POWER8 hardware."
      ]
    },
    {
      "company": "ModCloth",
      "position": "Systems Engineer",
      "website": "https://www.modcloth.com",
      "startDate": "2011-10-01",
      "endDate": "2013-09-01",
      "summary": "",
      "highlights": [
        "Built and maintained cloud infrastructure platform running on Joyent SmartDataCenter.",
        "Developed and implemented standardized procedures used by all engineering teams for application deployments using Chef and Capistrano.",
        "Provided operational support for all web properties (external and internal).",
        "Supported Cisco networking/firewall equipment, Nginx/HAProxy load balancers, Ruby application stack, and all data layers (MySQL, PostgreSQL, Solr, Redis).",
        "Developed and implemented monitoring solution using Circonus and Nagios.",
        "Implemented DDoS mitigation and CDN utilizing Cloudflare and Fastly.",
        "Subject matter expert and administrator for all databases used by engineering groups (business intelligence, e-commerce, social media, etc)."
      ]
    },
    {
      "company": "SugarCRM",
      "position": "Operations Engineer",
      "website": "https://www.sugarcrm.com",
      "startDate": "2008-09-01",
      "endDate": "2011-09-01",
      "summary": "",
      "highlights": [
        "Maintained private cloud infrastructure in two remote data centers (San Jose, CA and London, England).",
        "Implemented Puppet/Cobbler configuration management and provisioning system.",
        "Developed and maintained tooling used for internal and customer data backups.",
        "Virtualized redundant and under utilized systems using Xen hypervisor.",
        "Developed and implemented department disaster recovery policy.",
        "Worked remotely from Atlanta, GA."
      ]
    },
    {
      "company": "NationalNet",
      "position": "Systems Administrator",
      "website": "https://www.nationalnet.com",
      "startDate": "2004-10-01",
      "endDate": "2008-09-01",
      "summary": "",
      "highlights": [
        "Provided production support for ~2500 fully managed servers running Debian Linux and FreeBSD.",
        "Provided production support for hosted large scale PHP/MySQL applications running across load balanced web frontends and clustered database servers.",
        "Implemented network monitoring system utilizing SNMP and watchdogd.",
        "Ported custom in-house Linux applications to FreeBSD.",
        "Implemented local FreeBSD CVS source mirror and compiled custom distributions for internal use."
      ]
    }
  ],
  "education": [
    {
      "institution": "Kennesaw State University",
      "area": "Mathematics",
      "startDate": "2003-01-01",
      "endDate": "2004-12-01"
    },
    {
      "institution": "Southern Polytechnic State University",
      "area": "Physics",
      "startDate": "1998-08-01",
      "endDate": "2001-06-01"
    }
  ],
  "skills": [
    {
      "name": "Configuration Management",
      "keywords": [
        "Chef",
        "Puppet",
        "Terraform"
      ]
    },
    {
      "name": "Databases",
      "keywords": [
        "MySQL (Percona)",
        "PostgreSQL",
        "DynamoDB"
      ]
    },
    {
      "name": "Cloud Technologies and Providers",
      "keywords": [
        "Amazon AWS",
        "Google Compute Platform"
      ]
    },
    {
      "name": "Continuous Deployment Pipeline",
      "keywords": [
        "Kubernetes",
        "Docker",
        "Jenkins"
      ]
    },
    {
      "name": "Coding Languages",
      "keywords": [
        "Bash",
        "Python",
        "Node.js"
      ]
    }
  ]
}

